DEMUX_ROOT=/mnt/hds/proj/bioinfo/DEMUX/

deliver_hk() {
    # based on a sample name and category, deliver a file to the cust/INBOX

    local sample_id=${1?'please provide a sample id'}
    local category=${2?'please provide a category'}
    local cat_file=

    cat_file=$(housekeeper get --infer-case --sample ${sample_id} --category ${category})
    if [[ $? == 0 ]]; then
        deliver inbox --sample ${sample_id} ${cat_file}
    else
        (>&2 echo "ERROR no ${category} found for ${sample_id}")
    fi
}

deliver_bamvcf() {
    # based on a sample name, deliver the bam/bai file to the cust/INBOX

    local sample_id=${1?'please provide a sample id'}
    local categories=(bam bai
                      bcf-raw bcf-raw-index
                      bcf-raw-sv
                      vcf vcf-clinical vcf-research
                      vcf-clinical-sv vcf-research-sv
                      vcf-clinical-sv-bin vcf-clinical-sv-bin-index)
    local cat_file

    for category in ${categories[@]}; do
        $(deliver_hk ${sample_id} ${category})
    done

    return 0
}

deliver_bamvcfs() {
    # based on a case name, deliver all bam/bai:s for all samples of a case

    local case=${1?'please provide a case name'}
    local samples=($(cglims get ${case} id))

    if [[ ${#samples[@]} == 0 ]]; then
        (>&2 echo "ERROR no samples found for case ${case}")
        return 1
    else
        for sample_id in ${samples[@]}; do
            (>&2 echo "working on sample: ${sample_id}")
            $(deliver_bamvcf ${sample_id})
        done
        return 0
    fi
}

deliver_fastqs_sample() {
    # based on a sample id, deliver all fastq files of a sample to the cust/INBOX

    sample_id=${1?'please provide a sample id'}
    fcs=$(cgstats flowcells --sample ${sample_id})

    (
        shopt -s nullglob # only nullglob in here

        for fc in ${fcs[@]}; do
            for fastq in ${DEMUX_ROOT}/*${fc}/Unalign*/Project_*/Sample_${sample_id}_*/*fastq.gz ${DEMUX_ROOT}/*${fc}/Unalign*/Project_*/Sample_${sample_id}[BF]_*/*fastq.gz; do
                lims_sample_id=$(cglims get ${sample_id} id) # make sure we have the lims sample id and not the CG one
                deliver inbox --sample ${lims_sample_id} ${fastq}
            done
        done
    )

    return 0
}

deliver_fastqs_project() {
    # based on a project_id, deliver all fastq files of the sample belonging of the project to the cust/INBOX

    project_id=${1?'please provide a project id'}
    samples=$(cglims get --project ${project_id} id)

    for sample in ${samples[@]}; do
        $(deliver_fastqs_sample ${sample})
    done

    return 0
}

deliver_fastqs_fc() {
    # based on a fc, deliver all fastq files of the samples on a FC to the cust/INBOX

    fc=${1?'please provide a FC id'}
    samples=$(cgstats samples --flowcell ${fc})

    (
        shopt -s nullglob # only nullglob in here

        for sample in ${samples[@]}; do
            for fastq in ${DEMUX_ROOT}/*${fc}/Unalign*/Project_*/Sample_${sample}_*/*fastq.gz ${DEMUX_ROOT}/*${fc}/Unalign*/Project_*/Sample_${sample}[BF]_*/*fastq.gz; do
                deliver inbox --sample ${sample} ${fastq}
            done
        done
    )

    return 0
}
