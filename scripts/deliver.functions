DEMUX_ROOT=/mnt/hds/proj/bioinfo/DEMUX/
EXT_ROOT=/mnt/hds/proj/bioinfo/EXTERNAL/


log() {
    NOW=$(date +"%Y%m%d%H%M%S")
    echo "[${NOW}] $@"
}

add_demux() {
    RUNPATH=${1?'Path to the DEMUX FC'}

    if /mnt/hds/proj/bioinfo/SERVER/miniconda/envs/oldcgstats/bin/python /mnt/hds/proj/bioinfo/SCRIPTS/xparseunaligned.py ${RUNPATH} &> ${RUNPATH}/LOG/xparseunaligned.`date +'%Y%m%d%H%M%S'`.log; then
        echo "Added to cgstats (clinical-db)"
    else
        (>&2 echo "ERROR failed to add to cgstats (clinical-db)")
    fi
    if /mnt/hds/proj/bioinfo/SERVER/miniconda/bin/python /mnt/hds/proj/bioinfo/SERVER/apps/deliver/scripts/xparseunaligned.py ${RUNPATH} /mnt/hds/proj/bioinfo/SERVER/apps/deliver/config/databases.yaml; then
        echo "Added to cgstats (AWS)"
    else
        (>&2 echo "ERROR failed to add to cgstats (AWS)")
    fi

}

deliver_hk_case() {
    # based on a case id and category, deliver a file to the cust/INBOX

    local case_id=${1?'please provide a case id'}
    local category=${2?'please provide a category'}
    local cat_file=

    cat_files=($(housekeeper get --case ${case_id} --category ${category} 2> /dev/null))
    if [[ $? == 0 ]]; then
        for cat_file in "${cat_files[@]}"; do
            deliver inbox --case ${case_id} ${cat_file}
        done
    else
        (>&2 echo "WARNING ${category} not found for ${case_id}")
    fi
    return 0
}

deliver_hk_sample() {
    # based on a sample name and category, deliver a file to the cust/INBOX

    local sample_id=${1?'please provide a sample id'}
    local category=${2?'please provide a category'}
    local cat_file=

    cat_file=$(housekeeper get --sample ${sample_id} --category ${category} 2> /dev/null)
    if [[ $? == 0 ]]; then
        deliver inbox --sample ${sample_id} ${cat_file}
    else
        (>&2 echo "WARNING ${category} not found for ${sample_id}")
        return 1
    fi
    return 0
}

deliver_bamvcf() {
    # based on a sample name, deliver the bam/bai file to the cust/INBOX

    local sample_id=${1?'please provide a sample id'}
    local sample_cats=(bam bai)
    local case_cats=(bcf-raw bcf-raw-index
                     bcf-raw-sv
                     vcf vcf-clinical vcf-research
                     vcf-clinical-bin vcf-clinical-bin-index
                     vcf-research-bin vcf-research-bin-index
                     vcf-clinical-sv vcf-research-sv
                     vcf-clinical-sv-bin vcf-clinical-sv-bin-index
                     gbcf gbcf-index
                     no-acmg-vcf acmg-vcf
                     no-acmg-sv-vcf acmg-sv-vcf
                     )

    for category in ${sample_cats[@]}; do
        deliver_hk_sample ${sample_id} ${category}
    done

    case_id=$(cglims get ${sample_id} case_id)

    for category in ${case_cats[@]}; do
        deliver_hk_case ${case_id} ${category}
    done

    return 0
}

deliver_bamvcfs() {
    # based on a case id, deliver all bam/bai:s for all samples of a case

    local case_id=${1?'please provide a case id'}
    local samples=($(cglims get --minimal ${case_id} id))

    if [[ ${#samples[@]} == 0 ]]; then
        (>&2 echo "ERROR samples not found for case ${case_id}")
        return 1
    else
        for sample_id in ${samples[@]}; do
            (>&2 echo "Working on sample: ${sample_id}")
            deliver_bamvcf ${sample_id}
        done
        return 0
    fi
}

deliver_all_bamvcfs() {
    # deliver all bamvcfs from the past 7 days
    days=${1-7}
    onlycust=${2}

    cases=($(housekeeper runs --output case --limit 1000 --after $(date +'%Y-%m-%d' -d "$days days ago")))
    if [[ $? != 0 ]]; then
        (>&2 echo "No cases found for past ${days} day(s)")
        return 1
    fi

    (>&2 echo "Working on cases: ${cases[@]}")
    for case in "${cases[@]}"; do
        if ! [[ $case =~ cust* ]]; then continue; fi
        (>&2 echo "Working on case: $case")
        if ! [[ -z ${onlycust} ]]; then
            cust=${case%%-*}
            if [[ ${cust} != ${onlycust} ]]; then
                continue
            fi
        fi
        deliver_bamvcfs ${case}
    done
}

deliver_fastqs_sample() {
    # based on a sample id, deliver all fastq files of a sample to the cust/INBOX

    sample_id=${1?'please provide a sample id'}
    fcs=$(cgstats flowcells --sample ${sample_id})

    (>&2 echo "Found following FCs for ${sample_id}:")
    (>&2 echo ${fcs[@]})

    lims_sample_id=$(cglims get --minimal ${sample_id} id 2> /dev/null) # make sure we have the lims sample id and not the CG one
    if [[ -z "${lims_sample_id}" ]]; then
        (>&2 echo "ERROR: 'cglims get --minimal ${sample_id} id' did not yield any results!")
        return 1
    fi

    for fc in ${fcs[@]}; do
        fastq_files=( $(deliver ls --flowcell ${fc} --sample ${sample_id}) )
        for fastq in ${fastq_files[@]}; do
            deliver inbox --sample ${lims_sample_id} ${fastq}
        done
    done

    return 0
}

deliver_fastqs_case() {
    # based on a case_id, deliver all fastq files of the sample belonging to a case to the cust/INBOX

    case_id=${1?'please provide a case id'}
    samples=$(cglims get --minimal ${case_id} id)

    (>&2 echo "Found following samples:")
    (>&2 echo ${samples[@]})

    for sample in ${samples[@]}; do
        deliver_fastqs_sample ${sample}
    done

    return 0
}

deliver_fastqs_project() {
    # based on a project_id, deliver all fastq files of the sample belonging of the project to the cust/INBOX

    project_id=${1?'please provide a project id'}
    samples=$(cglims get --minimal --project ${project_id} id)

    (>&2 echo "Found following samples:")
    (>&2 echo ${samples[@]})

    for sample in ${samples[@]}; do
        deliver_fastqs_sample ${sample}
    done

    return 0
}

deliver_fastqs_fc() {
    # based on a fc, deliver all fastq files of the samples on a FC to the cust/INBOX

    fc=${1?'please provide a FC id'}
    samples=$(cgstats samples --flowcell ${fc})

    (>&2 echo "Found following samples:")
    (>&2 echo ${samples[@]})

    for sample_id in ${samples[@]}; do
        lims_sample_id=$(cglims get --minimal ${sample_id} id) # make sure we have the lims sample id and not the CG one
        fastq_files=( $(deliver ls --flowcell ${fc} --sample ${sample_id}) )
        for fastq in ${fastq_files[@]}; do
            deliver inbox --sample ${lims_sample_id} ${fastq}
        done
    done

    return 0
}

rm_fastqs_project() {
    # based on a project_id, deliver all fastq files of the sample belonging of the project to the cust/INBOX

    project_id=${1?'please provide a project id'}
    samples=$(cglims get --minimal --project ${project_id} id)

    (>&2 echo "Found following samples:")
    (>&2 echo ${samples[@]})

    read -p "Are you sure? [y/n] " ANSWER
    if [[ $ANSWER != 'y' ]]; then
        return 1
    fi

    for sample_id in ${samples[@]}; do
        fastq_files=( $(deliver ls --sample ${sample_id}) )
        for fastq in ${fastq_files[@]}; do
            echo $fastq
            echo "rm $(readlink -e ${fastq})"
            rm $(readlink -e ${fastq})
        done
    done

    return 0
}

rm_empty_reads_fastq_pair() {
    fastq_1=${1?'please provide a path to a fastq file read dir 1'}
    fastq_2=${fastq_1/_1.fastq.gz/_2.fastq.gz}

    outdir=$2
    if [[ -z ${outdir} ]]; then
        outdir=$(dirname ${fastq_1})/clean/
    fi
    (>&2 echo "mkdir -f ${outdir}")
    mkdir -p ${outdir}

    ids_to_exclude=${outdir}/ids_to_exclude
    for fastq_file in "${fastq_1}" "${fastq_2}"; do
        fastq_file_name=$(basename ${fastq_file})
        (>&2 echo "bioawk -cfastx 'length($seq) == 0 {print \"@\"$name}' $fastq_file >> ${ids_to_exclude}")
        bioawk -cfastx 'length($seq) == 0 {print "@"$name}' $fastq_file >> ${ids_to_exclude}
    done
    (>&2 echo "echo $(sort -u ${ids_to_exclude}) > ${ids_to_exclude}")
    echo $(sort -u ${ids_to_exclude}) > ${ids_to_exclude}
    (>&2 echo "sed -i '/^$/d' ${ids_to_exclude}")
    sed -i '/^$/d' ${ids_to_exclude}
    ids_to_exclude_count=$(wc -l ${ids_to_exclude})
    ids_to_exclude_count=${ids_to_exclude_count%% *}
    if [[ ${ids_to_exclude_count} -gt 0 ]]; then
        for fastq_file in "${fastq_1}" "${fastq_2}"; do
            fastq_file_name=$(basename ${fastq_file})
            (>&2 echo "gzip -d -c ${fastq_file} | paste - - - - | grep -v -f ${ids_to_exclude} | tr '\t' '\n' | gzip --best > '${outdir}/${fastq_file_name}'")
            gzip -d -c ${fastq_file} | paste - - - - | grep -v -f ${ids_to_exclude} | tr "\t" "\n" | gzip --best > "${outdir}/${fastq_file_name}"
        done
        rm ${ids_to_exclude}
        return 0
    else
        (>&2 echo "mv ${fastq_1} ${outdir}")
        mv ${fastq_1} ${outdir}
        (>&2 echo "mv ${fastq_2} ${outdir}")
        mv ${fastq_2} ${outdir}
        rm ${ids_to_exclude}
        return 1
    fi
}

rm_empty_reads_fastq_pair_dir() {
    indir=${1?'please provide an input directory'}
    outdir=$2

    for fastq in ${indir}/*_1.fastq.gz; do
        rm_empty_reads_fastq_pair ${fastq} ${outdir}
    done
}

import_cust_samples() {
    indir=${1?'please provide the md5sum directory'}

    for md5sum_file in ${indir}/*md5sum; do
        (>&2 echo "Found: $md5sum_file")
        import_cust_sample ${md5sum_file}
    done
}

import_cust_sample() {
    ticket_file=${1?'please provide a md5sum file: ${ticketID}.md5sum'}
    indir=$(readlink -f $(dirname "${ticket_file}"))

    while read -a LINE; do
        md5sum=${LINE[0]}
        fastq_file=${LINE[1]}
        fastq_file=${fastq_file##*/}

        (>&2 echo ${indir}/${fastq_file})

        deliver ext inbox ${indir}/${fastq_file}
    done < ${ticket_file}
    mv $ticket_file ${ticket_file}_complete
}

import_ext_samples() {
    ext_dir=${1-$EXT_ROOT}

    for sample_dir in ${ext_dir}/cust*/*; do
        if [[ -e ${sample_dir}/delivered.txt ]]; then
            (>&2 echo "Delivered: ${sample_dir}")
            continue
        fi
        import_ext_sample $(basename ${sample_dir})
    done
}

import_ext_sample() {
    sample_id=${1?'please provide a sample_id'}
    ext_dir=${2-$EXT_ROOT}
    cust_id=$(cglims get ${sample_id} customer)

    sample_dir="${ext_dir}/${cust_id}/${sample_id}"

    if [[ -e ${sample_dir}/delivered.txt ]]; then
        (>&2 echo "Delivered: ${sample_dir}")
        return
    fi

    (>&2 echo "Importing to MIP_ANALYSIS: ${sample_dir}")

    # link the sample
    deliver ext mip ${sample_dir} |& tee -a ${sample_dir}/project.log

    # add sample to HK
    add_sample $sample_id

    date +'%Y%m%d%H%M%S' > ${sample_dir}/delivered.txt
}

import_sample_as_ext() {
    # based on a sample_id, import the sample as an external sample

    sample_id=${1?'please provide a sample id'}
    cust_id=$(cglims get ${sample_id} customer)
    name=$(cglims get ${sample_id} name)

    fastqs=$(deliver ls --sample ${sample_id})

    # link to our INBOX first .. with a proper name
    for fastq in ${fastqs[@]}; do
        deliver inbox --outdir /mnt/hds/proj/INBOX/ --sample ${sample_id} ${fastq}
    done

    # now import to EXTERNAL
    for inbox_fastq in /mnt/hds/proj/INBOX/${cust_id}/INBOX/*/${name}/*.fastq.gz; do
        deliver ext inbox ${inbox_fastq}
    done

    return 0
}
