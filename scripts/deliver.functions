DEMUX_ROOT=/mnt/hds/proj/bioinfo/DEMUX/


add_demux() {
    RUNPATH=${1?'Path to the DEMUX FC'}

    if /mnt/hds/proj/bioinfo/SERVER/miniconda/envs/oldcgstats/bin/python /mnt/hds/proj/bioinfo/SCRIPTS/xparseunaligned.py ${RUNPATH} &> ${RUNPATH}/LOG/xparseunaligned.`date +'%Y%m%d%H%M%S'`.log; then
        echo "Added to cgstats (clinical-db)"
    else
        (>&2 echo "ERROR failed to add to cgstats (clinical-db)")
    fi
    if /mnt/hds/proj/bioinfo/SERVER/miniconda/bin/python /mnt/hds/proj/bioinfo/SERVER/apps/deliver/scripts/xparseunaligned.py ${RUNPATH} /mnt/hds/proj/bioinfo/SERVER/apps/deliver/config/databases.yaml; then
        echo "Added to cgstats (AWS)"
    else
        (>&2 echo "ERROR failed to add to cgstats (AWS)")
    fi

}

deliver_hk_case() {
    # based on a case id and category, deliver a file to the cust/INBOX

    local case_id=${1?'please provide a case id'}
    local category=${2?'please provide a category'}
    local cat_file=

    cat_files=( $(housekeeper get --case ${case_id} --category ${category}) )
    if [[ $? == 0 ]]; then
        for cat_file in ${cat_files[@]}; do
            deliver inbox --case ${case_id} ${cat_file}
        done
    else
        (>&2 echo "ERROR no ${category} found for ${project_id}")
    fi
}

deliver_hk_sample() {
    # based on a sample name and category, deliver a file to the cust/INBOX

    local sample_id=${1?'please provide a sample id'}
    local category=${2?'please provide a category'}
    local cat_file=

    cat_file=$(housekeeper get --sample ${sample_id} --category ${category})
    if [[ $? == 0 ]]; then
        deliver inbox --sample ${sample_id} ${cat_file}
    else
        (>&2 echo "ERROR no ${category} found for ${sample_id}")
    fi
}

deliver_bamvcf() {
    # based on a sample name, deliver the bam/bai file to the cust/INBOX

    local sample_id=${1?'please provide a sample id'}
    local sample_cats=(bam bai)
    local case_cats=(bcf-raw bcf-raw-index
                     bcf-raw-sv
                     vcf vcf-clinical vcf-research
                     vcf-clinical-bin vcf-clinical-bin-index
                     vcf-research-bin vcf-research-bin-index
                     vcf-clinical-sv vcf-research-sv
                     vcf-clinical-sv-bin vcf-clinical-sv-bin-index)

    for category in ${sample_cats[@]}; do
        $(deliver_hk_sample ${sample_id} ${category})
    done

    case_id=$(cglims get ${sample_id} case_id)

    for category in ${case_cats[@]}; do
        $(deliver_hk_case ${case_id} ${category})
    done

    return 0
}

deliver_bamvcfs() {
    # based on a case id, deliver all bam/bai:s for all samples of a case

    local case_id=${1?'please provide a case id'}
    local samples=($(cglims get ${case_id} id))

    if [[ ${#samples[@]} == 0 ]]; then
        (>&2 echo "ERROR no samples found for case ${case_id}")
        return 1
    else
        for sample_id in ${samples[@]}; do
            (>&2 echo "working on sample: ${sample_id}")
            $(deliver_bamvcf ${sample_id})
        done
        return 0
    fi
}

deliver_fastqs_sample() {
    # based on a sample id, deliver all fastq files of a sample to the cust/INBOX

    sample_id=${1?'please provide a sample id'}
    fcs=$(cgstats flowcells --sample ${sample_id})

    (
        shopt -s nullglob # only nullglob in here

        for fc in ${fcs[@]}; do
            fastq_files=( $(deliver ls ${fc} --sample ${sample_id}) )
            for fastq in ${fastq_files[@]}; do
                lims_sample_id=$(cglims get ${sample_id} id) # make sure we have the lims sample id and not the CG one
                deliver inbox --sample ${lims_sample_id} ${fastq}
            done
        done
    )

    return 0
}

deliver_fastqs_case() {
    # based on a case_id, deliver all fastq files of the sample belonging to a case to the cust/INBOX

    case_id=${1?'please provide a case id'}
    samples=$(cglims get ${case_id} id)

    for sample in ${samples[@]}; do
        $(deliver_fastqs_sample ${sample})
    done

    return 0
}

deliver_fastqs_project() {
    # based on a project_id, deliver all fastq files of the sample belonging of the project to the cust/INBOX

    project_id=${1?'please provide a project id'}
    samples=$(cglims get --project ${project_id} id)

    for sample in ${samples[@]}; do
        $(deliver_fastqs_sample ${sample})
    done

    return 0
}

deliver_fastqs_fc() {
    # based on a fc, deliver all fastq files of the samples on a FC to the cust/INBOX

    fc=${1?'please provide a FC id'}
    samples=$(cgstats samples --flowcell ${fc})

    (
        shopt -s nullglob # only nullglob in here

        for sample_id in ${samples[@]}; do
            lims_sample_id=$(cglims get ${sample_id} id) # make sure we have the lims sample id and not the CG one
            fastq_files=( $(deliver ls ${fc} --sample ${sample_id}) )
            for fastq in ${fastq_files[@]}; do
                deliver inbox --sample ${lims_sample_id} ${fastq}
            done
        done
    )

    return 0
}
